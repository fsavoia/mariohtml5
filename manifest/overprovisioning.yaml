apiVersion: v1
kind: Namespace
metadata:
  name: overprovisioning
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: cluster-proportional-autoscaler-service-account
  namespace: overprovisioning
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: overprovisioning-autoscaler
  namespace: overprovisioning
data:
  linear: |-
    {
      "coresPerReplica": 10,
      "nodesPerReplica": 1,
      "min": 1,
      "max": 100,
      "preventSinglePointFailure": true      
    }
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: cluster-proportional-autoscaler
rules:
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["list", "watch"]
  - apiGroups: [""]
    resources: ["replicationcontrollers/scale"]
    verbs: ["get", "update"]
  - apiGroups: ["extensions","apps"]
    resources: ["deployments/scale", "replicasets/scale"]
    verbs: ["get", "update"]
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "create"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: cluster-proportional-autoscaler
subjects:
  - kind: ServiceAccount
    name: cluster-proportional-autoscaler-service-account
    namespace: overprovisioning
roleRef:
  kind: ClusterRole
  name: cluster-proportional-autoscaler
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: overprovisioning
value: -1
globalDefault: false
description: "Priority class used by overprovisioning."
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: overprovisioning-autoscaler
  namespace: overprovisioning
  labels:
    app: overprovisioning-autoscaler
spec:
  selector:
    matchLabels:
      app: overprovisioning-autoscaler
  replicas: 1
  template:
    metadata:
      labels:
        app: overprovisioning-autoscaler
    spec:
      nodeSelector:
          karpenter: "true"
      tolerations:
      - key: "kubernetes.io/karpenter-taint"
        operator: "Exists"
        effect: "NoSchedule"
      containers:
        - image: gcr.io/google_containers/cluster-proportional-autoscaler-amd64:1.7.1
          name: autoscaler
          command:
            - ./cluster-proportional-autoscaler
            - --namespace=overprovisioning
            - --configmap=overprovisioning-autoscaler
            - --target=deployment/overprovisioning
            - --logtostderr=true
            - --v=2
          resources:
            limits:
              memory: 200Mi
            requests:
              memory: 100Mi
      serviceAccountName: cluster-proportional-autoscaler-service-account
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: overprovisioning
  namespace: overprovisioning
spec:
  replicas: 1
  selector:
    matchLabels:
      run: overprovisioning
  template:
    metadata:
      labels:
        run: overprovisioning
    spec:
      priorityClassName: overprovisioning
      nodeSelector:
          karpenter: "true"
      tolerations:
      - key: "kubernetes.io/karpenter-taint"
        operator: "Exists"
        effect: "NoSchedule"
      containers:
      - name: reserve-resources
        image: k8s.gcr.io/pause
        resources:
          requests:
            cpu: "3000m"
            memory: "4000Mi"